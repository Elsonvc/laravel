name: Laravel Pipeline

on:
  push:
    branches:
      - master
      - Demo
      - staging
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Composer Development
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
    - name: Install Composer dependencies
      run: composer install

    # NPM Development
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    - name: Install npm dependencies
      run: npm install

    # Retrieve LARAVEL_ENV from Parameter Store
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Retrieve LARAVEL_ENV from Parameter Store
      id: ssm
      uses: poad/get-aws-ssm-parameter@v2.0.0
      with:
        parameter-name: laravel_env
        aws-region: us-east-2

    # Create .env file
    - name: Create .env file
      run: |
        touch .env
        echo "APP_ENV=PROD" > .env
        echo "LARAVEL_ENV=${{ steps.ssm.outputs.value }}" >> .env

    #zip_application

    - name: Create deployment package
      run: zip -r ${{ github.run_id }}.zip . # Create a ZIP file of the current directory

    - name: List files in directory
      run: ls -l # List files to verify the ZIP file was created

    - name: Upload ZIP to S3
      run: aws s3 cp ${{ github.run_id }}.zip s3://"${{ secrets.AWS_S3_BUCKET }}/app/${{ github.run_id }}.zip" --region ${{ secrets.AWS_REGION }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}



    - name: Deploy Application
      run: |
          ENVIRONMENT="unknown"
          if [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
            ENVIRONMENT="production"
            APPLICATION_NAME="${{ secrets.CODEDEPLOY_APPLICATION }}"
            CODEDEPLOY_GROUPNAME="${{ secrets.CODEDEPLOY_GROUP_NAME }}"
            AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
          elif [[ "${GITHUB_REF}" == "refs/heads/Demo" ]]; then
            ENVIRONMENT="Demo"
            APPLICATION_NAME="${{ secrets.DEMO_CODEDEPLOY_APPLICATION }}"
            CODEDEPLOY_GROUPNAME="${{ secrets.DEMO_CODEDEPLOY_GROUP_NAME }}"
            AWS_S3_BUCKET="${{ secrets.DEMO_AWS_S3_BUCKET }}"
          elif [[ "${GITHUB_REF}" == "refs/heads/staging" ]]; then
            ENVIRONMENT="staging"
            APPLICATION_NAME="${{ secrets.STAGING_CODEDEPLOY_APPLICATION }}"
            CODEDEPLOY_GROUPNAME="${{ secrets.STAGING_CODEDEPLOY_GROUP_NAME }}"
            AWS_S3_BUCKET="${{ secrets.STAGING_AWS_S3_BUCKET }}"
          fi
  
          if [[ "${ENVIRONMENT}" != "unknown" ]]; then
            sed -i "1 a codedeploy_application_name='${APPLICATION_NAME}'" scripts/aws_codedeploy.sh
            sed -i "2 a codedeploy_groupname='${CODEDEPLOY_GROUPNAME}'" scripts/aws_codedeploy.sh
            sed -i "3 a aws_s3_bucket_name='${AWS_S3_BUCKET}'" scripts/aws_codedeploy.sh
            sed -i "4 a CI_PIPELINE_ID='${{ github.run_id }}'" scripts/aws_codedeploy.sh
          else
            echo "Unknown branch ${GITHUB_REF}, skipping deployment."
            exit 1
          fi
  
    - name: CodeDeploy script
      run: cat scripts/aws_codedeploy.sh
  
    - name: Run CodeDeploy script
      run: bash scripts/aws_codedeploy.sh
    env:
      APPLICATION_NAME: ${{ secrets.STAGING_CODEDEPLOY_APPLICATION }}
      CODEDEPLOY_GROUPNAME: ${{ secrets.STAGING_CODEDEPLOY_GROUP_NAME }}
      AWS_S3_BUCKET: ${{ secrets.STAGING_AWS_S3_BUCKET }}
