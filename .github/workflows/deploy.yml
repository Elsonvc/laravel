name: Laravel Pipeline

on:
  push:
    branches:
      - master
      - demo
      - staging
  workflow_dispatch:

jobs:
  composer_development:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
    - name: Install Composer dependencies
      run: composer install
    - name: Debug - List files before zipping
      run: ls -R

  npm_development:
    runs-on: ubuntu-latest
    needs: composer_development
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    - name: Install npm dependencies
      run: npm install

  create_env_file:
    runs-on: ubuntu-latest
    needs: npm_development
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Retrieve LARAVEL_ENV from Parameter Store
      id: ssm
      uses: poad/get-aws-ssm-parameter@v2.0.0
      with:
        parameter-name: laravel_env
        aws-region: us-east-2
    - name: Create .env file
      run: |
        touch .env
        echo "APP_ENV=PROD" > .env
        echo "LARAVEL_ENV=${{ steps.ssm.outputs.value }}" >> .env
        # Add more environment variables as needed
    - name: Upload .env file as artifact
      uses: actions/upload-artifact@v3
      with:
        name: env-file
        path: .env

  zip_application:
    runs-on: ubuntu-latest
    needs: create_env_file
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Download .env file
      uses: actions/download-artifact@v3
      with:
        name: env-file
    - name: Create deployment package
      run: |
        zip -r laravel.zip .  # Create a ZIP file of the application
    - name: List files in directory
      run: ls -l
    - name: Upload ZIP to S3
      run: |
        aws s3 cp laravel.zip s3://elson-testing/app/laravel.zip --region us-east-2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy_master:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: zip_application
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}STAGING_AWS_S3_BUCKET
          aws-region: us-east-1
      - name: Prepare AWS CodeDeploy
        run: |
          sed -i "1 a codedeploy_application_name='${{ secrets.APPLICATION_NAME }}'" scripts/aws_codedeploy.sh
          sed -i "2 a codedeploy_groupname='${{ secrets.CODEDEPLOY_GROUPNAME }}'" scripts/aws_codedeploy.sh
          sed -i "3 a aws_s3_bucket_name='${{ secrets.AWS_S3_BUCKET }}'" scripts/aws_codedeploy.sh
          sed -i "4 a CI_PIPELINE_ID='${{ github.run_id }}'" scripts/aws_codedeploy.sh
      - name: CodeDeploy script
        run: cat scripts/aws_codedeploy.sh
      - name: Run CodeDeploy script
        run: bash scripts/aws_codedeploy.sh
    env:
      APPLICATION_NAME: ${{ secrets.CODEDEPLOY_APPLICATION }}
      CODEDEPLOY_GROUPNAME: ${{ secrets.CODEDEPLOY_GROUP_NAME }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

  deploy_demo:
    if: github.ref == 'refs/heads/demo'
    runs-on: ubuntu-latest
    needs: zip_application
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Prepare AWS CodeDeploy
        run: |
          sed -i "1 a codedeploy_application_name='${{ secrets.DEMO_CODEDEPLOY_APPLICATION }}'" scripts/aws_codedeploy.sh
          sed -i "2 a codedeploy_groupname='${{ secrets.DEMO_CODEDEPLOY_GROUP_NAME }}'" scripts/aws_codedeploy.sh
          sed -i "3 a aws_s3_bucket_name='${{ secrets.DEMO_AWS_S3_BUCKET }}'" scripts/aws_codedeploy.sh
          sed -i "4 a CI_PIPELINE_ID='${{ github.run_id }}'" scripts/aws_codedeploy.sh
      - name: CodeDeploy script
        run: cat scripts/aws_codedeploy.sh
      - name: Run CodeDeploy script
        run: bash scripts/aws_codedeploy.sh
    env:
      APPLICATION_NAME: ${{ secrets.DEMO_CODEDEPLOY_APPLICATION }}
      CODEDEPLOY_GROUPNAME: ${{ secrets.DEMO_CODEDEPLOY_GROUP_NAME }}
      AWS_S3_BUCKET: ${{ secrets.DEMO_AWS_S3_BUCKET }}

  deploy_staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs: zip_application
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Prepare AWS CodeDeploy
        run: |
          sed -i "1 a codedeploy_application_name='${{ secrets.STAGING_CODEDEPLOY_APPLICATION }}'" scripts/staging_codedeploy.sh
          sed -i "2 a codedeploy_groupname='${{ secrets.STAGING_CODEDEPLOY_GROUP_NAME }}'" scripts/staging_codedeploy.sh
          sed -i "3 a aws_s3_bucket_name='${{ secrets.STAGING_AWS_S3_BUCKET }}'" scripts/staging_codedeploy.sh
          sed -i "4 a CI_PIPELINE_ID='${{ github.run_id }}'" scripts/staging_codedeploy.sh
      - name: CodeDeploy script
        run: cat scripts/aws_codedeploy.sh
      - name: Run CodeDeploy script
        run: bash scripts/aws_codedeploy.sh
    env:
      APPLICATION_NAME: ${{ secrets.STAGING_CODEDEPLOY_APPLICATION }}
      CODEDEPLOY_GROUPNAME: ${{ secrets.STAGING_CODEDEPLOY_GROUP_NAME }}
      AWS_S3_BUCKET: ${{ secrets.STAGING_AWS_S3_BUCKET }}
